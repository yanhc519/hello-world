/*
 * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
 * OF SUCH DAMAGE.
 *
 * This file is part of the lwIP TCP/IP stack.
 * 
 * Author: Adam Dunkels <adam@sics.se>
 *
 */
#include "lwip/opt.h"

#if LWIP_NETCONN

#include "lwip/api.h"
#include "lwip/sys.h"
#include "stdio.h"
#include "lcd.h"

#define UDPECHO_THREAD_PRIO  ( tskIDLE_PRIORITY + 5 )

static struct netconn *conn;
static ip_addr_t addrfrom;
/*-----------------------------------------------------------------------------------*/
static void udpecho_thread(void *arg)
{
	static struct netbuf *bufrx;
	err_t err;
	char * drcv;
	u16_t dlen;
	int loopi;
  
	LWIP_UNUSED_ARG(arg);

	IP6_ADDR(&addrfrom, PP_HTONL(0xfc000000), PP_HTONL(0x0000d401), PP_HTONL(0), PP_HTONL(0xd4010001));

	conn = netconn_new(NETCONN_UDP);
	if (conn!= NULL)
	{
		netconn_set_recvtimeout(conn, 1);
		err = netconn_bind(conn, &addrfrom, 2020);
		if (err == ERR_OK)
		{
			while (1) 
			{
				err = netconn_recv(conn, &bufrx);
				if(err == ERR_OK)
				{
					netbuf_data(bufrx, (void *)&drcv, &dlen);
					printf("dlen: %d, ndata rcved++++++++++:\r\n\t", dlen);
					for(loopi=0; loopi<dlen; loopi++)
					{
						printf("%x ", drcv[loopi]);
					}
					printf("\r\n++++++++++\r\n");

					netbuf_delete(bufrx);
				}
			}
		}
		else
		{
			netconn_delete(conn);
			printf("can not bind netconn");
		}
	}
	else
	{
		printf("can create new UDP netconn");
	}
	

//	static struct netbuf *buf;
//	static ip_addr_t addrto;
//	err_t err;
//	char datasend[20] = "Hello UDP.";
//	int counter = 0;
//  
//	LWIP_UNUSED_ARG(arg);

//	buf = netbuf_new();

//	IP6_ADDR(&addrfrom, PP_HTONL(0xfc000000), PP_HTONL(0x0000d401), PP_HTONL(0), PP_HTONL(0xd4010001));
//	IP6_ADDR(&addrto, PP_HTONL(0xfc000000), PP_HTONL(0x0000d401), PP_HTONL(0), PP_HTONL(0x00000001));

//	conn = netconn_new(NETCONN_UDP);
//	if (conn!= NULL)
//	{
//		err = netconn_bind(conn, &addrfrom, 2020);
//		if (err == ERR_OK)
//		{
//			while (1) 
//			{
//				sprintf(datasend, "Hello UDP. %04d", counter++);
//				err = netbuf_ref(buf, datasend, 20);
//				//	printf("send data: %s\r\n", datasend);
//				LCD_DisplayNum(60,180,counter,8,24,1);
//			  	netconn_sendto(conn, buf, &addrto, 2020);
//				vTaskDelay(500);
//			}
//		}
//		else
//		{
//			netconn_delete(conn);
//			printf("can not bind netconn");
//		}
//	}
//	else
//	{
//		printf("can create new UDP netconn");
//	}
}
/*-----------------------------------------------------------------------------------*/
void udpecho_init(void)
{
	sys_thread_new("udpecho_thread", udpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE,UDPECHO_THREAD_PRIO );
}

#endif /* LWIP_NETCONN */
